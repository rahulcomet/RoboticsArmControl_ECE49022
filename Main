import json
from os import stat                                         
import socket
import sys
import time
import threading
import RPi.GPIO as GPIO
from adafruit_servokit import ServoKit

#GPIO setup for sensor input
GPIO.setmode(GPIO.BCM)
GPIO.setup(17, GPIO.IN)

#Global variables storing reset angle values for each servo
rst_claw_OC = 0
rst_claw_R = 0
rst_ext1 = 0
rst_ext2 = 0
rst_ext3 = 0
rst_sweep = 0

#Connecting the servos to the PWM driver channels   
kit = ServoKit(channels = 16)                    

#Sample json string to represent possible instruction format
dummy_json = {  'X': 0,
                'Y': 0,
                'Z': 0,
                'OC': 0,
                'Reset': 0,
                'Rotate': 0,         
             }   
             
#Function to control servo responsible for opening and closing the claw based on pressure sensor signal
def servo_claw_OC(status):
#Multiprocessing/Threading might be required for the two loops to run simultaneously 
    for i in range (90, 190, 10):
        if status == 1:
            kit.servo[0].angle = i + rst_claw_OC
            time.sleep(0.5)
            status = read_sensor()
        else:
            pass

#Function to control servo responsible for rotation of the claw in the yz plane
def servo_claw_rotate(orientation):
    if orientation == 0:
        kit.servo[1].angle = rst_claw_R
    else:
        kit.servo[1].angle = 90

#Three functions [servo_ext(1-3)] to control the three servos responsible for arm extension in the xz plane
def servo_ext1_C():
    pass

def servo_ext2_Z():                                                          
    pass

def servo4_ext3_X():
    pass

#Function to control the servo responsible for arm sweep in the xy plane
def servo_sweep_Y(status, curr_angle):
    while True:
        if status == 1:
            curr_angle += 10
            kit.servo[0].angle = curr_angle
            time.sleep(0.5)
            dict_json = read_ethernet()
            status = dict_json["Y"]
        elif status == -1:
            curr_angle += 10
            kit.servo[0].angle = curr_angle
            time.sleep(0.5)
            dict_json = read_ethernet()
            status = dict_json["Y"]
        else:
            break

#Function to reset all servos to default positions
def reset(rst):
    if rst == 1:
        kit.servo[0].angle = rst_claw_OC
        kit.servo[1].angle = rst_claw_R
        kit.servo[2].angle = rst_ext1
        kit.servo[3].angle = rst_ext1
        kit.servo[4].angle = rst_ext3
        kit.servo[5].angle = rst_sweep
    else:
        pass

#Function to read digital (via ADC) sensor data 
def read_sensor():
    prev_input = 0
    while True:
        input = GPIO.input(17)                   #GPIO 17
        if(not prev_input and input):
            break
        prev_input = input
        time.sleep(0.1)
    GPIO.cleanup()

#Function to read linear instructions via ethernet as json and pass it to the instrusction processing function
def read_ethernet():
    #Read json via ethernet using socket programming (RPi as client) - TBD
    json_in = 0
    dict_in = json.loads(json_in)
    return dict_in

#Main driver function to control the individual servo functions and to process the json instructions into specific servo instructions based on keys
def instruction_processing(dict_in):
    #sends the instruction for the particular servos and their curr positions (initially set as default reset angles)
    servo_claw_OC(dict_in["OC"], rst_claw_OC)
    servo_claw_rotate(dict_in["Rotate"], rst_claw_R)
    servo_sweep_Y(dict_in["Y"], rst_sweep)
    servo_ext1_C()
    servo_ext2_Z()
    servo4_ext3_X()
    reset(dict_in["Reset"])

#Program runs infinitely unless interrupted
reset(1)                                        #default position, can be replaced by default reset instruction from Drew
try:
    while True:
        dict_in = read_ethernet()
        #send json instruction set to proessing function
        instruction_processing(dict_in)
except KeyboardInterrupt:
    print("Program Interrupted!", end='', flush=True)
    GPIO.cleanup()
